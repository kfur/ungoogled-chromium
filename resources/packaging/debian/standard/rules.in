#!/usr/bin/make -f

# enable verbose build messages
export DH_VERBOSE=1

# enable all build hardening flags
export DEB_BUILD_MAINT_OPTIONS=hardening=+all

export CLANG_BASE_PATH=/usr/lib/llvm-5.0

# more verbose linker output
defines+=target_extra_ldflags=\"-Wl,--stats\"

# avoid error in v8's garbage collector (see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=68853)
defines+=target_extra_cxxflags=\"-fno-delete-null-pointer-checks -Wno-deprecated-declarations\"

# set the appropriate cpu architecture
DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq (i386,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x86\"
endif
ifeq (amd64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x64\"
endif
ifeq (arm64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm64\"
endif
ifeq (armhf,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm\" \
	 arm_use_neon=false
endif

# auto-inserted gn flags
$ungoog{gn_flags}

# some notes about embedded libraries
#  can't use system nss since net/third_party/nss is heavily patched
#  can't use system ots (open text *summarizer*) since that's not google's ots (open text *sanitizer*)

# handle parallel build options
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
njobs=-j$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# paths to files needed by flot
flotpaths=/usr/share/javascript/jquery/*min.js \
          /usr/share/javascript/jquery-flot/*min.js \

%:
	dh $@

$ungoog{build_output}/gn:
	mkdir -p $ungoog{build_output} || true
	./tools/gn/bootstrap/bootstrap.py -o $ungoog{build_output}/gn -s $(njobs)

override_dh_auto_configure:
	# output compiler information
	$(CXX) --version
	# use system flot
	for file in $(flotpaths); do ln -sf $$file third_party/flot; done
	# strip out system third_party libraries
	cp third_party/freetype/src/src/psnames/pstables.h .
	./debian/scripts/unbundle
	mkdir -p third_party/freetype/src/src/psnames
	mv pstables.h third_party/freetype/src/src/psnames

override_dh_auto_build-arch: $ungoog{build_output}/gn
	./$ungoog{build_output}/gn gen $ungoog{build_output} --args="$(defines)" --fail-on-unused-args
	ninja $(njobs) -C $ungoog{build_output} chrome chrome_sandbox content_shell chromedriver

override_dh_auto_build-indep: $ungoog{build_output}/gn
	./$ungoog{build_output}/gn gen $ungoog{build_output} --args="$(defines)" --fail-on-unused-args
	ninja $(njobs) -C $ungoog{build_output} packed_resources

override_dh_auto_install-arch:
	cp $ungoog{build_output}/chrome $ungoog{build_output}/chromium
	cp $ungoog{build_output}/content_shell $ungoog{build_output}/chromium-shell
	cp $ungoog{build_output}/chrome_sandbox $ungoog{build_output}/chrome-sandbox
	cp $ungoog{build_output}/locales/en-US.pak $ungoog{build_output}/resources
	chmod 4755 $ungoog{build_output}/chrome-sandbox # suid sandbox
	sed -e s/@@PACKAGE@@/chromium/g -e s/@@MENUNAME@@/Chromium/g \
	    < chrome/app/resources/manpage.1.in > $ungoog{build_output}/chromium.1
	dh_auto_install
	# create /etc/chromium.d README file
	echo "Any files placed in this directory will be sourced prior to executing chromium." \
	    > debian/ungoogled-chromium/etc/chromium.d/README
	# update launcher script with build information
	sed 's|@BUILD_DIST@|$(shell printf "%s %s/%s" $(shell lsb_release -si) $(shell lsb_release -sc) $(shell lsb_release -sr))|' \
	    < debian/scripts/chromium > debian/ungoogled-chromium/usr/bin/chromium
	# move icons into /usr/share
	./debian/scripts/icons

override_dh_auto_install-indep:
	rm -f $ungoog{build_output}/locales/en-US.pak
	dh_auto_install

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_strip:
	dh_strip --no-automatic-dbgsym # Do not build any debug packages

override_dh_gencontrol:
	dh_gencontrol -- -VBuilt-Using="$(shell dpkg-query -f '$${source:Package} (= $${source:Version}), ' -W libjs-jquery libjs-jquery-flot)"

override_dh_auto_clean:
	rm -rf out
	find . -name \*.pyc -execdir rm -f {} \;
	dh_auto_clean
