# Fix building with enable_reporting=false
# In profile_impl_io_data.h/cc and reporting_service_proxy.cc the devs forgot to check if reporting was enabled before using a reporting feature
# In printer_handler.cc, due to some combination of build flags used in the ungoogled-chromium build, MakeUnique was not pulled in

--- a/chrome/browser/ui/webui/print_preview/printer_handler.cc
+++ b/chrome/browser/ui/webui/print_preview/printer_handler.cc
@@ -7,6 +7,7 @@
 #include "build/buildflag.h"
 #include "chrome/browser/ui/webui/print_preview/extension_printer_handler.h"
 #include "chrome/common/features.h"
+#include "base/memory/ptr_util.h"
 
 #if BUILDFLAG(ENABLE_SERVICE_DISCOVERY)
 #include "chrome/browser/ui/webui/print_preview/privet_printer_handler.h"
--- a/content/browser/net/reporting_service_proxy.cc
+++ b/content/browser/net/reporting_service_proxy.cc
@@ -36,6 +36,7 @@ class ReportingServiceProxyImpl : public
                    const std::string& group,
                    const std::string& type,
                    std::unique_ptr<base::Value> body) override {
+#if BUILDFLAG(ENABLE_REPORTING)
     std::unique_ptr<const base::Value> const_body =
         base::WrapUnique(body.release());
 
@@ -54,6 +55,7 @@ class ReportingServiceProxyImpl : public
     }
 
     reporting_service->QueueReport(url, group, type, std::move(const_body));
+#endif
   }
 
  private:
--- a/chrome/browser/profiles/profile_impl_io_data.h
+++ b/chrome/browser/profiles/profile_impl_io_data.h
@@ -195,6 +195,7 @@ class ProfileImplIOData : public Profile
       const StoragePartitionDescriptor& partition_descriptor) const override;
   chrome_browser_net::Predictor* GetPredictor() override;
 
+#if BUILDFLAG(ENABLE_REPORTING)
   // Returns a net::ReportingService, if reporting should be enabled. Otherwise,
   // returns nullptr.
   // TODO(mmenke): Remove once URLRequestContextBuilders are always used to
@@ -205,6 +206,7 @@ class ProfileImplIOData : public Profile
   // Returns a net::ReportingPolicy, if reporting should be enabled. Otherwise,
   // returns nullptr.
   static std::unique_ptr<net::ReportingPolicy> MaybeCreateReportingPolicy();
+#endif
 
   // Deletes all network related data since |time|. It deletes transport
   // security state since |time| and also deletes HttpServerProperties data.
--- a/chrome/browser/profiles/profile_impl_io_data.cc
+++ b/chrome/browser/profiles/profile_impl_io_data.cc
@@ -502,7 +502,9 @@ void ProfileImplIOData::InitializeIntern
       builder, std::move(request_interceptors),
       std::move(profile_params->protocol_handler_interceptor));
 
+#if BUILDFLAG(ENABLE_REPORTING)
   builder->set_reporting_policy(MaybeCreateReportingPolicy());
+#endif
 }
 
 void ProfileImplIOData::OnMainRequestContextCreated(
@@ -638,7 +640,9 @@ net::URLRequestContext* ProfileImplIODat
           context->host_resolver()));
   context->SetJobFactory(std::move(top_job_factory));
 
+#if BUILDFLAG(ENABLE_REPORTING)
   context->SetReportingService(MaybeCreateReportingService(context));
+#endif
 
   return context;
 }
@@ -728,6 +732,7 @@ chrome_browser_net::Predictor* ProfileIm
   return predictor_.get();
 }
 
+#if BUILDFLAG(ENABLE_REPORTING)
 std::unique_ptr<net::ReportingService>
 ProfileImplIOData::MaybeCreateReportingService(
     net::URLRequestContext* url_request_context) const {
@@ -746,6 +751,7 @@ ProfileImplIOData::MaybeCreateReportingP
 
   return base::MakeUnique<net::ReportingPolicy>();
 }
+#endif
 
 void ProfileImplIOData::ClearNetworkingHistorySinceOnIOThread(
     base::Time time,
